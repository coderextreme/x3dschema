<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D
  PUBLIC "ISO//Web3D//DTD X3D 3.2//EN" "https://www.web3d.org/specifications/x3d-3.2.dtd">
<X3D xmlns:xsd="http://www.w3.org/2001/XMLSchema-instance"
      profile="Immersive"
      version="3.2"
      xsd:noNamespaceSchemaLocation="https://www.web3d.org/specifications/x3d-3.2.xsd">
   <head>
      <meta content="CameraPrototypes.x3d" name="title"/>
      <meta content="Camera, CameraShot and CameraMovement prototypes that demonstrate storyboard capabilities and precise camera operation. This is a developmental effort for potential X3D Specification improvement."
             name="description"/>
      <meta content="Don Brutzman and Jeff Weekley" name="creator"/>
      <meta content="16 March 2009" name="created"/>
      <meta content="25 October 2016" name="modified"/>
      <meta content="Schematron rules, backed up by initialize() checks"
             name="TODO"/>
      <meta content="BeyondViewpointCameraNodesWeb3D2009.pdf" name="reference"/>
      <meta content="https://www.web3d.org/x3d/specifications/ISO-IEC-FDIS-19775-1.2-X3D-AbstractSpecification/Part01/components/navigation.html"
             name="reference"/>
      <meta content="Camera nodes for Viewpoint navigation control" name="subject"/>
      <meta content="CameraExamples.x3d" name="reference"/>
      <meta content="https://www.web3d.org/x3d/content/examples/Basic/development/CameraPrototypes.x3d"
             name="identifier"/>
      <meta content="http://sourceforge.net/p/x3d/code/HEAD/tree/www.web3d.org/x3d/content/examples/Basic/development/CameraPrototypes.x3d"
             name="reference"/>
      <meta content="X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit"
             name="generator"/>
      <meta content="../license.html" name="license"/>
   </head>
   <Scene><!--"=============== Camera =============="-->
      <ProtoDeclare appinfo="Camera node provides direct control of scene view to enable cinematic camera animation shot by shot and move by move along with still digital-photography settings for offline rendering of camera images."
                     name="Camera">
         <ProtoInterface><!--"Viewpoint-related fields, NavigationInfo-related fields and Camera-unique fields"-->
            <field accessType="inputOutput"
                    appinfo="Text description to be displayed for this Camera"
                    name="description"
                    type="SFString"/>
            <field accessType="inputOutput"
                    appinfo="Camera position in local transformation frame, which is default prior to first CameraShot initialPosition getting activated"
                    name="position"
                    type="SFVec3f"
                    value="0 0 10"/>
            <field accessType="inputOutput"
                    appinfo="Camera rotation in local transformation frame, which is default prior to first CameraShot initialPosition getting activated"
                    name="orientation"
                    type="SFRotation"
                    value="0 0 1 0"/>
            <field accessType="inputOutput"
                    appinfo="pi/4"
                    name="fieldOfView"
                    type="SFFloat"
                    value="0.7854"/>
            <field accessType="inputOnly"
                    appinfo="input fraction drives interpolators"
                    name="set_fraction"
                    type="SFFloat"/>
            <field accessType="inputOnly"
                    appinfo="input event binds or unbinds this Camera"
                    name="set_bind"
                    type="SFBool"/>
            <field accessType="outputOnly"
                    appinfo="output event indicates when this Camera is bound"
                    name="bindTime"
                    type="SFTime"/>
            <field accessType="outputOnly"
                    appinfo="output event indicates whether this Camera is bound or unbound"
                    name="isBound"
                    type="SFBool"/>
            <field accessType="inputOutput"
                    appinfo="Vector distance to near clipping plane corresponds to NavigationInfo.avatarSize[0]"
                    name="nearClipPlane"
                    type="SFFloat"
                    value="0.25"/>
            <field accessType="inputOutput"
                    appinfo="Vector distance to far clipping plane corresponds to NavigationInfo.visibilityLimit"
                    name="farClipPlane"
                    type="SFFloat"
                    value="0.0"/>
            <field accessType="inputOutput"
                    appinfo="Array of CameraShot nodes which in turn contain CameraMovement nodes"
                    name="shots"
                    type="MFNode"><!--"initialization nodes (if any) go here"--></field>
            <field accessType="inputOutput"
                    appinfo="Whether camera headlight is on or off"
                    name="headlight"
                    type="SFBool"
                    value="true"/>
            <field accessType="inputOutput"
                    appinfo="Camera headlight color"
                    name="headlightColor"
                    type="SFColor"
                    value="1 1 1"/>
            <field accessType="inputOutput"
                    appinfo="Camera headlight intensity"
                    name="headlightIntensity"
                    type="SFFloat"
                    value="1"/>
            <field accessType="inputOutput"
                    appinfo="Camera filter color that modifies virtual lens capture"
                    name="filterColor"
                    type="SFColor"
                    value="1 1 1"/>
            <field accessType="inputOutput"
                    appinfo="Camera filter transparency that modifies virtual lens capture"
                    name="filterTransparency"
                    type="SFFloat"
                    value="1"/>
            <field accessType="inputOutput"
                    appinfo="upVector changes modify camera orientation (and possibly vice versa)"
                    name="upVector"
                    type="SFVec3f"
                    value="0 1 0"/>
            <field accessType="inputOutput"
                    appinfo="Focal length divided effective aperture diameter indicating width of focal plane"
                    name="fStop"
                    type="SFFloat"
                    value="5.6"/>
            <field accessType="inputOutput"
                    appinfo="Distance to focal plane of sharpest focus"
                    name="focusDistance"
                    type="SFFloat"
                    value="10"/>
            <field accessType="outputOnly"
                    appinfo="Mark start/stop with true/false output respectively useful to trigger external animations"
                    name="isActive"
                    type="SFBool"/>
            <field accessType="outputOnly"
                    appinfo="Total duration of contained enabled CameraShot (and thus CameraMovement) move durations"
                    name="totalDuration"
                    type="SFTime"/>
            <field accessType="inputOutput"
                    appinfo="OfflineRender node"
                    name="offlineRender"
                    type="SFNode"><!--"initialization node (if any) goes here"--></field>
            <field accessType="initializeOnly"
                    appinfo="enable console output to trace script computations and prototype progress"
                    name="traceEnabled"
                    type="SFBool"
                    value="false"/>
         </ProtoInterface>
         <ProtoBody>
            <Viewpoint DEF="CameraViewpoint">
               <IS>
                  <connect nodeField="description" protoField="description"/>
                  <connect nodeField="position" protoField="position"/>
                  <connect nodeField="orientation" protoField="orientation"/>
                  <connect nodeField="fieldOfView" protoField="fieldOfView"/>
                  <connect nodeField="set_bind" protoField="set_bind"/>
                  <connect nodeField="bindTime" protoField="bindTime"/>
                  <connect nodeField="isBound" protoField="isBound"/>
               </IS>
            </Viewpoint>
            <!--"NavInfo EXAMINE used since some browsers (InstantReality) try to lock view to vertical when flying to avoid disorientation"-->
            <NavigationInfo DEF="CameraNavInfo" type="&#34;EXAMINE&#34; &#34;FLY&#34; &#34;ANY&#34;">
               <IS>
                  <connect nodeField="set_bind" protoField="set_bind"/>
                  <connect nodeField="headlight" protoField="headlight"/>
                  <connect nodeField="visibilityLimit" protoField="farClipPlane"/>
                  <!--"No need to bind outputs bindTime, isBound from NavigationInfo since Viewpoint outputs will suffice. TODO inform BitManagement that bindTime field is missing."-->
               </IS>
            </NavigationInfo>
            <!--"this DirectionalLight replaces NavigationInfo headlight in order to add color capability"-->
            <DirectionalLight DEF="CameraDirectionalLight" global="true"><!--"TODO confirm other default field values match NavigationInfo spec"-->
               <IS>
                  <connect nodeField="on" protoField="headlight"/>
                  <connect nodeField="color" protoField="headlightColor"/>
                  <connect nodeField="intensity" protoField="headlightIntensity"/>
               </IS>
            </DirectionalLight>
            <PositionInterpolator DEF="CameraPositionInterpolator" key="0 1" keyValue="0 0 0 0 0 0">
               <IS>
                  <connect nodeField="set_fraction" protoField="set_fraction"/>
               </IS>
            </PositionInterpolator>
            <OrientationInterpolator DEF="CameraOrientationInterpolator"
                                      key="0 1"
                                      keyValue="0 1 0 0 0 1 0 0">
               <IS>
                  <connect nodeField="set_fraction" protoField="set_fraction"/>
               </IS>
            </OrientationInterpolator>
            <ROUTE fromField="value_changed"
                    fromNode="CameraPositionInterpolator"
                    toField="position"
                    toNode="CameraViewpoint"/>
            <ROUTE fromField="value_changed"
                    fromNode="CameraOrientationInterpolator"
                    toField="orientation"
                    toNode="CameraViewpoint"/>
            <Script DEF="CameraScript" directOutput="true" mustEvaluate="true"><!--"binding is controlled externally, all camera operations proceed the same regardless of whether bound or not"-->
               <field accessType="inputOutput"
                       appinfo="Text description to be displayed for this Camera"
                       name="description"
                       type="SFString"/>
               <field accessType="inputOutput"
                       appinfo="Camera position in local transformation frame"
                       name="position"
                       type="SFVec3f"/>
               <field accessType="inputOutput"
                       appinfo="Camera rotation in local transformation frame"
                       name="orientation"
                       type="SFRotation"/>
               <field accessType="inputOnly"
                       appinfo="input fraction drives interpolators"
                       name="set_fraction"
                       type="SFFloat"/>
               <field accessType="inputOnly"
                       appinfo="input event binds or unbinds this Camera"
                       name="set_bind"
                       type="SFBool"/>
               <field accessType="inputOutput"
                       appinfo="pi/4"
                       name="fieldOfView"
                       type="SFFloat"/>
               <field accessType="inputOutput"
                       appinfo="Vector distance to near clipping plane"
                       name="nearClipPlane"
                       type="SFFloat"/>
               <field accessType="inputOutput"
                       appinfo="Vector distance to far clipping plane"
                       name="farClipPlane"
                       type="SFFloat"/>
               <field accessType="inputOutput"
                       appinfo="Array of CameraShot nodes which in turn contain CameraMovement nodes"
                       name="shots"
                       type="MFNode"><!--"initialization nodes (if any) go here"--></field>
               <field accessType="inputOutput"
                       appinfo="Camera filter color that modifies virtual lens capture"
                       name="filterColor"
                       type="SFColor"/>
               <field accessType="inputOutput"
                       appinfo="Camera filter transparency that modifies virtual lens capture"
                       name="filterTransparency"
                       type="SFFloat"/>
               <field accessType="inputOutput"
                       appinfo="upVector changes modify camera orientation (and possibly vice versa)"
                       name="upVector"
                       type="SFVec3f"/>
               <field accessType="inputOutput"
                       appinfo="Focal length divided effective aperture diameter indicating width of focal plane"
                       name="fStop"
                       type="SFFloat"/>
               <field accessType="inputOutput"
                       appinfo="Distance to focal plane of sharpest focus"
                       name="focusDistance"
                       type="SFFloat"/>
               <field accessType="outputOnly"
                       appinfo="Mark start/stop with true/false output respectively useful to trigger external animations"
                       name="isActive"
                       type="SFBool"/>
               <field accessType="outputOnly"
                       appinfo="Total duration of contained enabled CameraShot (and thus CameraMovement) move durations"
                       name="totalDuration"
                       type="SFTime"/>
               <field accessType="inputOutput"
                       appinfo="OfflineRender node"
                       name="offlineRender"
                       type="SFNode"><!--"initialization node (if any) goes here"--></field>
               <field accessType="initializeOnly"
                       appinfo="node reference to permit getting setting fields from within Script"
                       name="ViewpointNode"
                       type="SFNode">
                  <Viewpoint USE="CameraViewpoint"/>
               </field>
               <field accessType="initializeOnly"
                       appinfo="node reference to permit getting setting fields from within Script"
                       name="NavInfoNode"
                       type="SFNode">
                  <NavigationInfo USE="CameraNavInfo"/>
               </field>
               <field accessType="initializeOnly"
                       appinfo="node reference to permit getting setting fields from within Script"
                       name="CameraPI"
                       type="SFNode">
                  <PositionInterpolator USE="CameraPositionInterpolator"/>
               </field>
               <field accessType="initializeOnly"
                       appinfo="node reference to permit getting setting fields from within Script"
                       name="CameraOI"
                       type="SFNode">
                  <OrientationInterpolator USE="CameraOrientationInterpolator"/>
               </field>
               <field accessType="inputOutput"
                       appinfo="key array for interpolators"
                       name="key"
                       type="MFFloat"/>
               <field accessType="inputOutput"
                       appinfo="keyValue array for PositionInterpolator"
                       name="keyValuePosition"
                       type="MFVec3f"/>
               <field accessType="inputOutput"
                       appinfo="keyValue array for OrientationInterpolator"
                       name="keyValueOrientation"
                       type="MFRotation"/>
               <field accessType="inputOutput"
                       appinfo="whether internal CameraShot and CameraMove nodes are tracking or changed via ROUTE events"
                       name="animated"
                       type="SFBool"
                       value="false"/>
               <field accessType="initializeOnly"
                       appinfo="perform checkShots() function once immediately after initialization"
                       name="initialized"
                       type="SFBool"
                       value="false"/>
               <field accessType="initializeOnly"
                       appinfo="how many CameraShot nodes are contained in shots array"
                       name="shotCount"
                       type="SFInt32"
                       value="0"/>
               <field accessType="initializeOnly"
                       appinfo="how many CameraMove nodes are contained in moves array"
                       name="movesCount"
                       type="SFInt32"
                       value="0"/>
               <field accessType="initializeOnly"
                       appinfo="how many frames were created in current loop"
                       name="frameCount"
                       type="SFFloat"
                       value="0"/>
               <field accessType="initializeOnly"
                       appinfo="holding variable"
                       name="startTime"
                       type="SFTime"
                       value="0"/>
               <field accessType="initializeOnly"
                       appinfo="holding variable"
                       name="priorTraceTime"
                       type="SFTime"
                       value="0"/>
               <field accessType="initializeOnly"
                       appinfo="enable console output to trace script computations and prototype progress"
                       name="traceEnabled"
                       type="SFBool"/>
               <IS>
                  <connect nodeField="description" protoField="description"/>
                  <connect nodeField="position" protoField="position"/>
                  <connect nodeField="orientation" protoField="orientation"/>
                  <connect nodeField="set_fraction" protoField="set_fraction"/>
                  <connect nodeField="set_bind" protoField="set_bind"/>
                  <connect nodeField="fieldOfView" protoField="fieldOfView"/>
                  <connect nodeField="nearClipPlane" protoField="nearClipPlane"/>
                  <connect nodeField="farClipPlane" protoField="farClipPlane"/>
                  <connect nodeField="shots" protoField="shots"/>
                  <connect nodeField="filterColor" protoField="filterColor"/>
                  <connect nodeField="filterTransparency" protoField="filterTransparency"/>
                  <connect nodeField="upVector" protoField="upVector"/>
                  <connect nodeField="fStop" protoField="fStop"/>
                  <connect nodeField="focusDistance" protoField="focusDistance"/>
                  <connect nodeField="isActive" protoField="isActive"/>
                  <connect nodeField="totalDuration" protoField="totalDuration"/>
                  <connect nodeField="offlineRender" protoField="offlineRender"/>
                  <connect nodeField="traceEnabled" protoField="traceEnabled"/>
               </IS>""&#xD;
""&#xD;
"ecmascript:"&#xD;
"function initialize () // CameraScript"&#xD;
"{"&#xD;
"//  tracePrint ('initialize start...');"&#xD;
""&#xD;
"    NavInfoNode.avatarSize[0]   = nearClipPlane;"&#xD;
""&#xD;
"    // remaining setups deferred to invocation of checkShots() method"&#xD;
"    // thanks to Yvonne Jung Fraunhofer for diagnosing better approach to function initialization"&#xD;
"    alwaysPrint ('initialize complete');"&#xD;
"}"&#xD;
""&#xD;
"function checkShots (eventValue)"&#xD;
"{"&#xD;
"    tracePrint ('checkShots() method should only occur after initialize() methods in all other Scripts are complete');"&#xD;
""&#xD;
"    // compute totalDuration by summing durations from contained CameraShot and CameraMovement nodes"&#xD;
"    totalDuration= 0;"&#xD;
"    shotCount  = shots.length;"&#xD;
"    movesCount = 0;"&#xD;
"    for (i = 0; i &lt; shotCount; i++) // shots index"&#xD;
"    {"&#xD;
"       tracePrint ('shots[' + i + '].moves.length=' + shots[i].moves.length);"&#xD;
"       movesCount   += shots[i].moves.length;"&#xD;
"       totalDuration = totalDuration + shots[i].shotDuration;"&#xD;
"       if (shots[i].moves.length == 0)"&#xD;
"       {"&#xD;
"          alwaysPrint ('warning: CameraShot[' + i + '][' + shots[i].description + '] has no contained CameraMove nodes');"&#xD;
"       }"&#xD;
"    }"&#xD;
"    // size checks before proceeding"&#xD;
"    if (shotCount == 0)"&#xD;
"    {"&#xD;
"       alwaysPrint ('warning: no CameraShot nodes found for the shots, nothing to do!');"&#xD;
"       return;"&#xD;
"    }"&#xD;
"    else if (movesCount == 0)"&#xD;
"    {"&#xD;
"       alwaysPrint ('warning: no CameraMove nodes found for the shots, nothing to do!');"&#xD;
"       return;"&#xD;
"    }"&#xD;
"    else if (totalDuration == 0)"&#xD;
"    {"&#xD;
"       alwaysPrint ('warning: totalDuration = 0 seconds, nothing to do!');"&#xD;
"       return;"&#xD;
"    }"&#xD;
"    tracePrint ('number of contained CameraShot nodes=' + shotCount);"&#xD;
"    tracePrint ('number of contained CameraMove nodes=' + movesCount);"&#xD;
"    tracePrint ('totalDuration=' + totalDuration + ' seconds for all shots and moves');"&#xD;
""&#xD;
"    // compute interpolators"&#xD;
"    var k = 0; // index for latest key, keyValuePosition, keyValueOrientation"&#xD;
"    for (i = 0; i &lt; shotCount; i++) // shots index"&#xD;
"    {"&#xD;
"        if (i==0) // initial entries"&#xD;
"        {"&#xD;
"           key[0]                   = 0.0; // no previous move"&#xD;
"           keyValuePosition[0]      = shots[i].initialPosition;"&#xD;
"           keyValueOrientation[0]   = shots[i].initialOrientation;"&#xD;
"        }"&#xD;
"        else     // new shot repositions, reorients camera as clean break from preceding shot/move"&#xD;
"        {"&#xD;
"           key[k+1]                 = key[k]; // start from end from previous move"&#xD;
"           keyValuePosition[k+1]    = shots[i].initialPosition;"&#xD;
"           keyValueOrientation[k+1] = shots[i].initialOrientation;"&#xD;
"           k++;"&#xD;
"        }"&#xD;
"        tracePrint (shots[i].description);"&#xD;
"        tracePrint ('shots[i].moves.length=' + shots[i].moves.length);"&#xD;
""&#xD;
"        for (j = 0; j &lt; shots[i].moves.length; j++) // moves index"&#xD;
"        {"&#xD;
"            var durationFloat =              shots[i].moves[j].duration;  // implicit type conversion from SFTime"&#xD;
"            //  durationFloat = new SFFloat (shots[i].moves[j].duration); // explicit type conversion from SFTime"&#xD;
"            //  tracePrint ('durationFloat=' + durationFloat);"&#xD;
"            key[k+1]               = key[k] + (durationFloat / totalDuration);"&#xD;
"            keyValuePosition[k+1]  = shots[i].moves[j].goalPosition;"&#xD;
"            if (!animated)"&#xD;
"            {"&#xD;
"                 keyValueOrientation[k+1] = shots[i].moves[j].goalOrientation;"&#xD;
"            }"&#xD;
"            else"&#xD;
"            {"&#xD;
"                // using constructor SFRotation (SFVec3f fromVector, SFVec3f toVector)"&#xD;
"                // see X3D ECMAScript binding Table 7.18 — SFRotation instance creation functions"&#xD;
""&#xD;
"                // test if difference vector is zero, if so maintain previous rotation"&#xD;
"                var shotVector = ViewpointNode.position.subtract(shots[i].moves[j].goalAimPoint).normalize();"&#xD;
"                if (shotVector.length() &gt;= 0)"&#xD;
"                {"&#xD;
"                    // default view direction is along -Z axis"&#xD;
"                    shots[i].moves[j].goalOrientation = new SFRotation (new SFVec3f (0, 0, 1), shotVector);"&#xD;
"                    keyValueOrientation[k+1] = shots[i].moves[j].goalOrientation;"&#xD;
"                }"&#xD;
"                else // note (k &gt; 0)"&#xD;
"                {"&#xD;
"                    keyValueOrientation[k+1] = keyValueOrientation[k];  // no change"&#xD;
"                }"&#xD;
""&#xD;
"                tracePrint ('shots[' + i + '].moves[' + j + '].goalAimPoint=' + shots[i].moves[j].goalAimPoint.toString());"&#xD;
"                tracePrint ('        ViewpointNode.position=' + ViewpointNode.position.toString());"&#xD;
"                tracePrint ('          shotVector     delta=' + ViewpointNode.position.subtract(shots[i].moves[j].goalAimPoint).toString());"&#xD;
"                tracePrint ('          shotVector normalize=' + ViewpointNode.position.subtract(shots[i].moves[j].goalAimPoint).normalize().toString());"&#xD;
"                tracePrint ('               goalOrientation=' + shots[i].moves[j].goalOrientation.toString());"&#xD;
"                tracePrint ('      keyValueOrientation[k+1]=' + keyValueOrientation[k+1].toString() + '\n');"&#xD;
"            }"&#xD;
"            k++; // update index to match latest key, keyValuePosition, keyValueOrientation"&#xD;
""&#xD;
"            // check animated parameter:  set true if any of moves are tracking moves"&#xD;
"            if (!animated)  animated = shots[i].moves[j].tracking; // once true, remains true"&#xD;
"         // tracePrint ('shots[' + i + '].moves[' + j + '].tracking=' + shots[i].moves[j].tracking + ', animated=' + animated);"&#xD;
""&#xD;
"            // intermediate trace"&#xD;
"            tracePrint ('                key=' + key);"&#xD;
"            tracePrint ('   keyValuePosition=' + keyValuePosition);"&#xD;
"            tracePrint ('keyValueOrientation=' + keyValueOrientation);"&#xD;
"            tracePrint ('- ' + shots[i].moves[j].description);"&#xD;
"        }"&#xD;
"    }"&#xD;
"    tracePrint ('                key=' + key);"&#xD;
"    tracePrint ('   keyValuePosition=' + keyValuePosition);"&#xD;
"    tracePrint ('keyValueOrientation=' + keyValueOrientation);"&#xD;
"    if (key.length != keyValuePosition.length)"&#xD;
"    {"&#xD;
"      alwaysPrint ('warning: internal error during array construction, ' +"&#xD;
"                  'key.length=' + key.length + ' must equal ' +"&#xD;
"                  'keyValuePosition.length=' + keyValuePosition.length);"&#xD;
"    }"&#xD;
"    if (key.length != keyValueOrientation.length)"&#xD;
"    {"&#xD;
"      alwaysPrint ('warning: internal error during array construction, ' +"&#xD;
"                  'key.length=' + key.length + ' must equal ' +"&#xD;
"                  'keyValueOrientation.length=' + keyValueOrientation.length);"&#xD;
"    }"&#xD;
"    if (key.length != (shotCount + movesCount))"&#xD;
"    {"&#xD;
"      alwaysPrint ('warning: internal error during array construction, ' +"&#xD;
"                  'key.length=' + key.length + ' must equal ' +"&#xD;
"                  '(shotCount + movesCount)=' + (shotCount + movesCount));"&#xD;
"    }"&#xD;
"    tracePrint ('           animated=' + animated);"&#xD;
"    // set node values"&#xD;
"    CameraPI.key      = key;"&#xD;
"    CameraOI.key      = key;"&#xD;
"    CameraPI.keyValue = keyValuePosition;"&#xD;
"    CameraOI.keyValue = keyValueOrientation;"&#xD;
""&#xD;
"    if (!animated) // output results"&#xD;
"    {"&#xD;
"        tracePrint ('&lt;PositionInterpolator    DEF=\\'CameraPositionInterpolator\\'    key=\\'' + stripBrackets(CameraPI.key) + '\\' keyValue=\\'' + stripBrackets(CameraPI.keyValue) + '\\'/&gt;');"&#xD;
"        tracePrint ('&lt;OrientationInterpolator DEF=\\'CameraOrientationInterpolator\\' key=\\'' + stripBrackets(CameraOI.key) + '\\' keyValue=\\'' + stripBrackets(CameraOI.keyValue) + '\\'/&gt;');"&#xD;
"    }"&#xD;
"    tracePrint ('checkShots() complete');"&#xD;
"}"&#xD;
""&#xD;
"function stripBrackets (fieldArray)"&#xD;
"{"&#xD;
"    // some browsers add brackets to array output strings, this function strips them"&#xD;
"    outputString = '';"&#xD;
"    for (i = 0; i &lt; fieldArray.length; i++)"&#xD;
"    {"&#xD;
"       outputString += fieldArray[i].toString();"&#xD;
"       if (i &lt; fieldArray.length - 1) outputString += ' ';"&#xD;
"    }"&#xD;
"    return outputString;"&#xD;
"}"&#xD;
""&#xD;
"function set_fraction (eventValue, timestamp) // input event received for inputOnly field"&#xD;
"{"&#xD;
"   // traceEnabled = false;  // for testing purposes"&#xD;
""&#xD;
"   // if Camera is being animated, immediately recompute interpolator settings"&#xD;
"   if (animated) checkShots (true);"&#xD;
""&#xD;
"   // trace progress on console with reduced output frequency"&#xD;
"   if (frameCount == 0)"&#xD;
"   {"&#xD;
"      alwaysPrint ('Animation loop commencing, timestamp=' + timestamp);"&#xD;
"      startTime      = timestamp;"&#xD;
"      priorTraceTime = timestamp;"&#xD;
"      alwaysPrint ('shotClock=' + (timestamp - startTime) + ' seconds, frameCount=' + frameCount + ', fraction=' + eventValue + ', position=' + ViewpointNode.position.toString() + ', orientation=' + ViewpointNode.orientation.toString());"&#xD;
""&#xD;
"      if (animated) // output results"&#xD;
"      {"&#xD;
"        // TODO how to report or speed up response?  alwaysPrint ('  aimPoint=' + aimPoint.toString());"&#xD;
"        tracePrint ('  &lt;PositionInterpolator    DEF=\\'CameraPositionInterpolator\\'    key=\\'' + stripBrackets(CameraPI.key) + '\\' keyValue=\\'' + stripBrackets(CameraPI.keyValue) + '\\'/&gt;');"&#xD;
"        tracePrint ('  &lt;OrientationInterpolator DEF=\\'CameraOrientationInterpolator\\' key=\\'' + stripBrackets(CameraOI.key) + '\\' keyValue=\\'' + stripBrackets(CameraOI.keyValue) + '\\'/&gt;');"&#xD;
"      }"&#xD;
"   }"&#xD;
"   else if ((timestamp - priorTraceTime) &gt;= 1.0) // 1 second trace interval"&#xD;
"   {"&#xD;
"      alwaysPrint ('shotClock=' + (timestamp - startTime) + ' seconds, frameCount=' + frameCount + ', fraction=' + eventValue + ', position=' + ViewpointNode.position.toString() + ', orientation=' + ViewpointNode.orientation.toString());"&#xD;
"      priorTraceTime = timestamp;"&#xD;
""&#xD;
"      if (animated) // output results"&#xD;
"      {"&#xD;
"        // TODO how to report or speed up response?  alwaysPrint ('  aimPoint=' + aimPoint.toString());"&#xD;
"        tracePrint ('  &lt;PositionInterpolator    DEF=\\'CameraPositionInterpolator\\'    key=\\'' + stripBrackets(CameraPI.key) + '\\' keyValue=\\'' + stripBrackets(CameraPI.keyValue) + '\\'/&gt;');"&#xD;
"        alwaysPrint ('  &lt;OrientationInterpolator DEF=\\'CameraOrientationInterpolator\\' key=\\'' + stripBrackets(CameraOI.key) + '\\' keyValue=\\'' + stripBrackets(CameraOI.keyValue) + '\\'/&gt;');"&#xD;
"      }"&#xD;
"   }"&#xD;
"   if (eventValue == 0)"&#xD;
"   {"&#xD;
"      // note that zero value is not necessarily sent first by TimeSensor, so otherwise ignored"&#xD;
"      frameCount++;"&#xD;
"   }"&#xD;
"   else if (eventValue == 1)"&#xD;
"   {"&#xD;
"      alwaysPrint ('shotClock=' + (timestamp - startTime) + ', frameCount=' + frameCount + ', fraction=' + eventValue + ', position=' + ViewpointNode.position.toString() + ', orientation=' + ViewpointNode.orientation.toString());"&#xD;
"      if (animated) // output results"&#xD;
"      {"&#xD;
"        // TODO how to report or speed up response?  alwaysPrint ('  aimPoint=' + aimPoint.toString());"&#xD;
"      }"&#xD;
"      alwaysPrint ('Animation loop complete.');"&#xD;
"      // do not unbind the Viewpoint and NavigationInfo nodes, let that be controlled externally"&#xD;
"   }"&#xD;
"   else"&#xD;
"   {"&#xD;
"      frameCount++;"&#xD;
"   }"&#xD;
"}"&#xD;
""&#xD;
"function set_bind (eventValue) // input event received for inputOnly field"&#xD;
"{"&#xD;
"   // need to ensure CameraShot nodes are properly initialized"&#xD;
"   if (initialized == false)"&#xD;
"   {"&#xD;
"      checkShots (true);"&#xD;
"      initialized = true;"&#xD;
"   }"&#xD;
"   if (eventValue)"&#xD;
"   {"&#xD;
"       tracePrint ('Camera has been bound');"&#xD;
"   }"&#xD;
"   else"&#xD;
"   {"&#xD;
"       tracePrint ('Camera has been unbound');"&#xD;
"   }"&#xD;
"}"&#xD;
""&#xD;
"function set_description (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    description = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_position (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    position = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_orientation (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    orientation = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_fieldOfView (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    fieldOfView = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_nearClipPlane (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    nearClipPlane = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_farClipPlane (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    farClipPlane = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_shots (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    shots = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_filterColor (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    filterColor = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_filterTransparency (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    filterTransparency = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_upVector (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    upVector = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_fStop (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    fStop = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_focusDistance (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    focusDistance = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_offlineRender (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    offlineRender = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_key (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    key = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_keyValuePosition (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    keyValuePosition = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_keyValueOrientation (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    keyValueOrientation = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_animated (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    animated = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function tracePrint (outputValue)"&#xD;
"{"&#xD;
"\tif (traceEnabled) alwaysPrint (outputValue);"&#xD;
"}"&#xD;
"function alwaysPrint (outputValue)"&#xD;
"{"&#xD;
"    // try to ensure outputValue is converted to string despite Browser.println idiosyncracies"&#xD;
"    var outputString = outputValue.toString(); // utility function according to spec"&#xD;
"    if (outputString == null) outputString = outputValue; // direct cast"&#xD;
""&#xD;
"    if  (description.length &gt; 0)"&#xD;
"         Browser.print ('[Camera: ' + description + '] ' + outputString + '\n');"&#xD;
"    else"&#xD;
"         Browser.print ('[Camera] ' + outputString + '\n');"&#xD;
"}"&#xD;
""&#xD;
""</Script>
            <ROUTE fromField="position"
                    fromNode="CameraScript"
                    toField="position"
                    toNode="CameraViewpoint"/>
            <ROUTE fromField="orientation"
                    fromNode="CameraScript"
                    toField="orientation"
                    toNode="CameraViewpoint"/>
            <ROUTE fromField="isActive"
                    fromNode="CameraScript"
                    toField="set_bind"
                    toNode="CameraViewpoint"/>
            <ROUTE fromField="isActive"
                    fromNode="CameraScript"
                    toField="set_bind"
                    toNode="CameraNavInfo"/>
            <ROUTE fromField="isActive"
                    fromNode="CameraScript"
                    toField="on"
                    toNode="CameraDirectionalLight"/>
         </ProtoBody>
      </ProtoDeclare>
      <!--"=============== CameraShot =============="-->
      <ProtoDeclare appinfo="CameraShot collects a specific set of CameraMovement animations that make up an individual shot."
                     name="CameraShot">
         <ProtoInterface>
            <field accessType="inputOutput"
                    appinfo="Text description to be displayed for this CameraShot"
                    name="description"
                    type="SFString"/>
            <field accessType="inputOutput"
                    appinfo="Whether this CameraShot can be activated"
                    name="enabled"
                    type="SFBool"
                    value="true"/>
            <field accessType="inputOutput"
                    appinfo="Set of CameraMovement nodes"
                    name="moves"
                    type="MFNode"><!--"initializing CameraMovement nodes are inserted here by scene author using ProtoInstance"--></field>
            <field accessType="inputOutput"
                    appinfo="Setup to reinitialize camera position for this shot"
                    name="initialPosition"
                    type="SFVec3f"
                    value="0 0 10"/>
            <field accessType="inputOutput"
                    appinfo="Setup to reinitialize camera rotation for this shot"
                    name="initialOrientation"
                    type="SFRotation"
                    value="0 0 1 0"/>
            <field accessType="inputOutput"
                    appinfo="Setup to reinitialize aimpoint (relative location for camera direction) for this shot"
                    name="initialAimPoint"
                    type="SFVec3f"
                    value="0 0 0"/>
            <field accessType="inputOutput"
                    appinfo="pi/4"
                    name="initialFieldOfView"
                    type="SFFloat"
                    value="0.7854"/>
            <field accessType="inputOutput"
                    appinfo="Focal length divided effective aperture diameter indicating width of focal plane"
                    name="initialFStop"
                    type="SFFloat"
                    value="5.6"/>
            <field accessType="inputOutput"
                    appinfo="Distance to focal plane of sharpest focus"
                    name="initialFocusDistance"
                    type="SFFloat"
                    value="10"/>
            <field accessType="outputOnly"
                    appinfo="Subtotal duration of contained CameraMovement move durations"
                    name="shotDuration"
                    type="SFTime"/>
            <field accessType="outputOnly"
                    appinfo="Mark start/stop with true/false output respectively useful to trigger external animations"
                    name="isActive"
                    type="SFBool"/>
            <field accessType="initializeOnly"
                    appinfo="enable console output to trace script computations and prototype progress"
                    name="traceEnabled"
                    type="SFBool"
                    value="false"/>
         </ProtoInterface>
         <ProtoBody>
            <Script DEF="CameraShotScript" directOutput="true" mustEvaluate="true">
               <field accessType="inputOutput"
                       appinfo="Text description to be displayed for this CameraShot"
                       name="description"
                       type="SFString"/>
               <field accessType="inputOutput"
                       appinfo="Whether this CameraShot can be activated"
                       name="enabled"
                       type="SFBool"/>
               <field accessType="inputOutput"
                       appinfo="Set of CameraMovement nodes"
                       name="moves"
                       type="MFNode"><!--"initialization nodes (if any) go here"--></field>
               <field accessType="inputOutput"
                       appinfo="Setup to reinitialize camera position for this shot"
                       name="initialPosition"
                       type="SFVec3f"/>
               <field accessType="inputOutput"
                       appinfo="Setup to reinitialize camera rotation for this shot"
                       name="initialOrientation"
                       type="SFRotation"/>
               <field accessType="inputOutput"
                       appinfo="Setup to reinitialize aimpoint (relative location for camera direction) for this shot"
                       name="initialAimPoint"
                       type="SFVec3f"/>
               <field accessType="inputOutput"
                       appinfo="pi/4"
                       name="initialFieldOfView"
                       type="SFFloat"/>
               <field accessType="inputOutput"
                       appinfo="Focal length divided effective aperture diameter indicating width of focal plane"
                       name="initialFStop"
                       type="SFFloat"/>
               <field accessType="inputOutput"
                       appinfo="Distance to focal plane of sharpest focus"
                       name="initialFocusDistance"
                       type="SFFloat"/>
               <field accessType="outputOnly"
                       appinfo="Subtotal duration of contained CameraMovement move durations"
                       name="shotDuration"
                       type="SFTime"/>
               <field accessType="outputOnly"
                       appinfo="Mark start/stop with true/false output respectively useful to trigger external animations"
                       name="isActive"
                       type="SFBool"/>
               <field accessType="initializeOnly"
                       appinfo="enable console output to trace script computations and prototype progress"
                       name="traceEnabled"
                       type="SFBool"/>
               <field accessType="inputOutput"
                       appinfo="key array for interpolators"
                       name="key"
                       type="MFFloat"/>
               <field accessType="inputOutput"
                       appinfo="keyValue array for PositionInterpolator"
                       name="keyValuePosition"
                       type="MFVec3f"/>
               <field accessType="inputOutput"
                       appinfo="keyValue array for OrientationInterpolator"
                       name="keyValueOrientation"
                       type="MFRotation"/>
               <IS>
                  <connect nodeField="description" protoField="description"/>
                  <connect nodeField="enabled" protoField="enabled"/>
                  <connect nodeField="moves" protoField="moves"/>
                  <connect nodeField="initialPosition" protoField="initialPosition"/>
                  <connect nodeField="initialOrientation" protoField="initialOrientation"/>
                  <connect nodeField="initialAimPoint" protoField="initialAimPoint"/>
                  <connect nodeField="initialFieldOfView" protoField="initialFieldOfView"/>
                  <connect nodeField="initialFStop" protoField="initialFStop"/>
                  <connect nodeField="initialFocusDistance" protoField="initialFocusDistance"/>
                  <connect nodeField="shotDuration" protoField="shotDuration"/>
                  <connect nodeField="isActive" protoField="isActive"/>
                  <connect nodeField="traceEnabled" protoField="traceEnabled"/>
               </IS>""&#xD;
""&#xD;
"ecmascript:"&#xD;
"function initialize () // CameraShotScript"&#xD;
"{"&#xD;
"//  tracePrint ('initialize start...');"&#xD;
""&#xD;
"    // compute shotDuration by summing durations from contained CameraMovement nodes"&#xD;
"    shotDuration = 0;"&#xD;
"    for (i = 0; i &lt; moves.length; i++)"&#xD;
"    {"&#xD;
"        shotDuration = shotDuration + moves[i].duration;"&#xD;
"    }"&#xD;
"    alwaysPrint ('number of contained CameraMove nodes=' + moves.length + ', shotDuration=' + shotDuration + ' seconds');"&#xD;
""&#xD;
"//  tracePrint ('... initialize() complete');"&#xD;
"}"&#xD;
""&#xD;
"function set_description (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    description = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_enabled (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    enabled = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_moves (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    moves = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_initialPosition (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    initialPosition = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_initialOrientation (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    initialOrientation = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_initialAimPoint (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    initialAimPoint = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_initialFieldOfView (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    initialFieldOfView = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_initialFStop (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    initialFStop = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_initialFocusDistance (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    initialFocusDistance = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_key (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    key = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_keyValuePosition (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    keyValuePosition = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_keyValueOrientation (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    keyValueOrientation = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive"&#xD;
""&#xD;
"function tracePrint (outputValue)"&#xD;
"{"&#xD;
"\tif (traceEnabled) alwaysPrint (outputValue);"&#xD;
"}"&#xD;
"function alwaysPrint (outputValue)"&#xD;
"{"&#xD;
"\t// try to ensure outputValue is converted to string despite browser idiosyncracies"&#xD;
"    var outputString = outputValue.toString(); // utility function according to spec"&#xD;
"    if (outputString == null) outputString = outputValue; // direct cast"&#xD;
""&#xD;
"    if  (description.length &gt; 0)"&#xD;
"         Browser.print ('[CameraShot: ' + description + '] ' + outputString + '\n');"&#xD;
"    else"&#xD;
"         Browser.print ('[CameraShot] ' + outputString + '\n');"&#xD;
"}"&#xD;
""&#xD;
""</Script>
            <!--"Add any ROUTEs here, going from Script to other nodes within ProtoBody"-->
         </ProtoBody>
      </ProtoDeclare>
      <!--"=============== CameraMovement =============="-->
      <ProtoDeclare appinfo="CameraMovement node defines a single camera movement animation including goalPosition, goalOrientation, goalAimPoint and goalFieldOfView."
                     name="CameraMovement">
         <ProtoInterface>
            <field accessType="inputOutput"
                    appinfo="Text description to be displayed for this CameraMovement"
                    name="description"
                    type="SFString"/>
            <field accessType="inputOutput"
                    appinfo="Whether this CameraMovement can be activated"
                    name="enabled"
                    type="SFBool"
                    value="true"/>
            <field accessType="inputOutput"
                    appinfo="Duration in seconds for this move"
                    name="duration"
                    type="SFFloat"
                    value="0"/>
            <field accessType="inputOutput"
                    appinfo="Goal camera position for this move"
                    name="goalPosition"
                    type="SFVec3f"
                    value="0 0 10"/>
            <field accessType="inputOutput"
                    appinfo="Goal camera rotation for this move"
                    name="goalOrientation"
                    type="SFRotation"
                    value="0 0 1 0"/>
            <field accessType="inputOutput"
                    appinfo="Whether or not camera direction is tracking towards the aimPoint"
                    name="tracking"
                    type="SFBool"
                    value="false"/>
            <field accessType="inputOutput"
                    appinfo="Goal aimPoint for this move, ignored if tracking=false"
                    name="goalAimPoint"
                    type="SFVec3f"
                    value="0 0 0"/>
            <field accessType="inputOutput"
                    appinfo="Goal fieldOfView for this move"
                    name="goalFieldOfView"
                    type="SFFloat"
                    value="0.7854"/>
            <field accessType="inputOutput"
                    appinfo="Focal length divided effective aperture diameter indicating width of focal plane"
                    name="goalFStop"
                    type="SFFloat"
                    value="5.6"/>
            <field accessType="inputOutput"
                    appinfo="Distance to focal plane of sharpest focus"
                    name="goalFocusDistance"
                    type="SFFloat"
                    value="10"/>
            <field accessType="outputOnly"
                    appinfo="Mark start/stop with true/false output respectively useful to trigger external animations"
                    name="isActive"
                    type="SFBool"/>
            <field accessType="initializeOnly"
                    appinfo="enable console output to trace script computations and prototype progress"
                    name="traceEnabled"
                    type="SFBool"
                    value="false"/>
         </ProtoInterface>
         <ProtoBody><!--"First node determines node type of this prototype"--><!--"Subsequent nodes do not render, but still must be a valid X3D subgraph"--><!--"Script holds CameraMovement initialization values for query by parent CameraShot, and also permits changing values via events"-->
            <Script DEF="CameraMovementScript" directOutput="true" mustEvaluate="true">
               <field accessType="inputOutput"
                       appinfo="Text description to be displayed for this CameraMovement"
                       name="description"
                       type="SFString"/>
               <field accessType="inputOutput"
                       appinfo="Whether this CameraMovement can be activated"
                       name="enabled"
                       type="SFBool"/>
               <field accessType="inputOutput"
                       appinfo="Duration in seconds for this move"
                       name="duration"
                       type="SFFloat"/>
               <field accessType="inputOutput"
                       appinfo="Goal camera position for this move"
                       name="goalPosition"
                       type="SFVec3f"/>
               <field accessType="inputOutput"
                       appinfo="Goal camera rotation for this move"
                       name="goalOrientation"
                       type="SFRotation"/>
               <field accessType="inputOutput"
                       appinfo="Whether or not camera direction is tracking towards the aimPoint"
                       name="tracking"
                       type="SFBool"/>
               <field accessType="inputOutput"
                       appinfo="Goal aimPoint for this move, ignored if tracking=false"
                       name="goalAimPoint"
                       type="SFVec3f"/>
               <field accessType="inputOutput"
                       appinfo="Goal fieldOfView for this move"
                       name="goalFieldOfView"
                       type="SFFloat"/>
               <field accessType="inputOutput"
                       appinfo="Focal length divided effective aperture diameter indicating width of focal plane"
                       name="goalFStop"
                       type="SFFloat"/>
               <field accessType="inputOutput"
                       appinfo="Distance to focal plane of sharpest focus"
                       name="goalFocusDistance"
                       type="SFFloat"/>
               <field accessType="outputOnly"
                       appinfo="Mark start/stop with true/false output respectively useful to trigger external animations"
                       name="isActive"
                       type="SFBool"/>
               <field accessType="initializeOnly"
                       appinfo="enable console output to trace script computations and prototype progress"
                       name="traceEnabled"
                       type="SFBool"/>
               <IS>
                  <connect nodeField="description" protoField="description"/>
                  <connect nodeField="enabled" protoField="enabled"/>
                  <connect nodeField="duration" protoField="duration"/>
                  <connect nodeField="goalPosition" protoField="goalPosition"/>
                  <connect nodeField="goalOrientation" protoField="goalOrientation"/>
                  <connect nodeField="tracking" protoField="tracking"/>
                  <connect nodeField="goalAimPoint" protoField="goalAimPoint"/>
                  <connect nodeField="goalFieldOfView" protoField="goalFieldOfView"/>
                  <connect nodeField="goalFStop" protoField="goalFStop"/>
                  <connect nodeField="goalFocusDistance" protoField="goalFocusDistance"/>
                  <connect nodeField="isActive" protoField="isActive"/>
                  <connect nodeField="traceEnabled" protoField="traceEnabled"/>
               </IS>""&#xD;
""&#xD;
"ecmascript:"&#xD;
"function initialize () // CameraMovementScript"&#xD;
"{"&#xD;
"//  tracePrint ('initialize start...');"&#xD;
"    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +"&#xD;
"                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()"&#xD;
"                           );"&#xD;
"    if (duration &lt; 0)"&#xD;
"    {"&#xD;
"       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');"&#xD;
"       duration = 0;"&#xD;
"    }"&#xD;
"    else if (duration == 0)"&#xD;
"    {"&#xD;
"       alwaysPrint ('warning: duration=0, nothing to do!');"&#xD;
"    }"&#xD;
"    tracePrint ('... initialize complete');"&#xD;
"}"&#xD;
""&#xD;
"function set_goalAimPoint (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    goalAimPoint_changed = eventValue;"&#xD;
"    tracePrint ('goalAimPoint=' + goalAimPoint.toString());"&#xD;
""&#xD;
"    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator"&#xD;
"}"&#xD;
""&#xD;
"function set_description (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    description = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_enabled (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    enabled = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_duration (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    duration = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_goalPosition (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    goalPosition = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_goalOrientation (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    goalOrientation = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_tracking (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    tracking = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_goalFieldOfView (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    goalFieldOfView = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_goalFStop (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    goalFStop = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_goalFocusDistance (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    goalFocusDistance = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive"&#xD;
""&#xD;
"function tracePrint (outputValue)"&#xD;
"{"&#xD;
"\tif (traceEnabled) alwaysPrint (outputValue);"&#xD;
"}"&#xD;
""&#xD;
"function alwaysPrint (outputValue)"&#xD;
"{"&#xD;
"\t// try to ensure outputValue is converted to string despite browser idiosyncracies"&#xD;
"    var outputString = outputValue.toString(); // utility function according to spec"&#xD;
"    if (outputString == null) outputString = outputValue; // direct cast"&#xD;
""&#xD;
"    if  (description.length &gt; 0)"&#xD;
"         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\n');"&#xD;
"    else"&#xD;
"         Browser.print ('[CameraMovement] ' + outputString + '\n');"&#xD;
"}"&#xD;
""&#xD;
""</Script>
            <!--"Add any ROUTEs here, going from Script to other nodes within ProtoBody"-->
         </ProtoBody>
      </ProtoDeclare>
      <!--"=============== OfflineRender =============="-->
      <ProtoDeclare appinfo="OfflineRender defines a parameters for offline rendering of Camera animation output to a movie file (or possibly a still shot)."
                     name="OfflineRender">
         <ProtoInterface><!--"TODO non-photorealistic rendering (NPR) parameters"-->
            <field accessType="inputOutput"
                    appinfo="Text description to be displayed for this OfflineRender"
                    name="description"
                    type="SFString"/>
            <field accessType="inputOutput"
                    appinfo="Whether this OfflineRender can be activated"
                    name="enabled"
                    type="SFBool"
                    value="true"/>
            <field accessType="inputOutput"
                    appinfo="Frames per second recorded for this rendering"
                    name="frameRate"
                    type="SFFloat"
                    value="30"/>
            <field accessType="inputOutput"
                    appinfo="Size of frame in number of pixels width and height"
                    name="frameSize"
                    type="SFVec2f"
                    value="640 480"/>
            <field accessType="inputOutput"
                    appinfo="Relative dimensions of pixel height/width typically 1.33 or 1"
                    name="pixelAspectRatio"
                    type="SFFloat"
                    value="1.33"/>
            <field accessType="inputOnly"
                    appinfo="Begin render operation"
                    name="set_startTime"
                    type="SFTime"/>
            <field accessType="outputOnly"
                    appinfo="Progress performing render operation (0..1)"
                    name="progress"
                    type="SFFloat"/>
            <field accessType="outputOnly"
                    appinfo="Render operation complete"
                    name="renderCompleteTime"
                    type="SFTime"/>
            <field accessType="initializeOnly"
                    appinfo="Format of rendered output movie (mpeg mp4 etc.), use first supported format"
                    name="movieFormat"
                    type="MFString"
                    value="&#34;mpeg&#34;"/>
            <field accessType="initializeOnly"
                    appinfo="Format of rendered output images (png jpeg gif tiff etc.) use first supported format"
                    name="imageFormat"
                    type="MFString"
                    value="&#34;png&#34;"/>
            <field accessType="initializeOnly"
                    appinfo="enable console output to trace script computations and prototype progress"
                    name="traceEnabled"
                    type="SFBool"
                    value="false"/>
         </ProtoInterface>
         <ProtoBody><!--"First node determines node type of this prototype"--><!--"Subsequent nodes do not render, but still must be a valid X3D subgraph"-->
            <Script DEF="OfflineRenderScript" mustEvaluate="true">
               <field accessType="inputOutput"
                       appinfo="Text description to be displayed for this OfflineRender"
                       name="description"
                       type="SFString"/>
               <field accessType="inputOutput"
                       appinfo="Whether this OfflineRender can be activated"
                       name="enabled"
                       type="SFBool"/>
               <field accessType="inputOutput"
                       appinfo="Frames per second recorded for this rendering"
                       name="frameRate"
                       type="SFFloat"/>
               <field accessType="inputOutput"
                       appinfo="Size of frame in number of pixels width and height"
                       name="frameSize"
                       type="SFVec2f"/>
               <field accessType="inputOutput"
                       appinfo="Relative dimensions of pixel height/width typically 1.33 or 1"
                       name="pixelAspectRatio"
                       type="SFFloat"/>
               <field accessType="inputOnly"
                       appinfo="Begin render operation"
                       name="set_startTime"
                       type="SFTime"/>
               <field accessType="outputOnly"
                       appinfo="Progress performing render operation (0..1)"
                       name="progress"
                       type="SFFloat"/>
               <field accessType="outputOnly"
                       appinfo="Render operation complete"
                       name="renderCompleteTime"
                       type="SFTime"/>
               <field accessType="initializeOnly"
                       appinfo="Format of rendered output movie (mpeg mp4 etc.)"
                       name="movieFormat"
                       type="MFString"/>
               <field accessType="initializeOnly"
                       appinfo="Format of rendered output images (png jpeg gif tiff etc.)"
                       name="imageFormat"
                       type="MFString"/>
               <field accessType="initializeOnly"
                       appinfo="enable console output to trace script computations and prototype progress"
                       name="traceEnabled"
                       type="SFBool"/>
               <IS>
                  <connect nodeField="description" protoField="description"/>
                  <connect nodeField="enabled" protoField="enabled"/>
                  <connect nodeField="frameRate" protoField="frameRate"/>
                  <connect nodeField="frameSize" protoField="frameSize"/>
                  <connect nodeField="pixelAspectRatio" protoField="pixelAspectRatio"/>
                  <connect nodeField="set_startTime" protoField="set_startTime"/>
                  <connect nodeField="progress" protoField="progress"/>
                  <connect nodeField="renderCompleteTime" protoField="renderCompleteTime"/>
                  <connect nodeField="movieFormat" protoField="movieFormat"/>
                  <connect nodeField="imageFormat" protoField="imageFormat"/>
                  <connect nodeField="traceEnabled" protoField="traceEnabled"/>
               </IS>""&#xD;
""&#xD;
"ecmascript:"&#xD;
"function initialize () // OfflineRenderScript"&#xD;
"{"&#xD;
"//  tracePrint ('initialize start...');"&#xD;
""&#xD;
"    tracePrint ('... initialize complete');"&#xD;
"}"&#xD;
""&#xD;
"function set_description (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    description = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_enabled (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    enabled = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_frameRate (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    frameRate = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_frameSize (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    frameSize = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_pixelAspectRatio (eventValue) // input event received for inputOutput field"&#xD;
"{"&#xD;
"    pixelAspectRatio = eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function set_startTime (eventValue) // input event received for inputOnly field"&#xD;
"{"&#xD;
"   // do something with input eventValue;"&#xD;
"}"&#xD;
""&#xD;
"function tracePrint (outputValue)"&#xD;
"{"&#xD;
"\tif (traceEnabled) alwaysPrint (outputValue);"&#xD;
"}"&#xD;
""&#xD;
"function alwaysPrint (outputValue)"&#xD;
"{"&#xD;
"\t// try to ensure outputValue is converted to string despite browser idiosyncracies"&#xD;
"    var outputString = outputValue.toString(); // utility function according to spec"&#xD;
"    if (outputString == null) outputString = outputValue; // direct cast"&#xD;
""&#xD;
"    if  (description.length &gt; 0)"&#xD;
"         Browser.print ('[OfflineRender: ' + description + '] ' + outputString + '\n');"&#xD;
"    else"&#xD;
"         Browser.print ('[OfflineRender] ' + outputString + '\n');"&#xD;
"}"&#xD;
""&#xD;
""</Script>
            <!--"Add any ROUTEs here, going from Script to other nodes within ProtoBody"-->
         </ProtoBody>
      </ProtoDeclare>
      <!--"=============== Launch Prototype Example =============="-->
      <Background skyColor="0.282353 0.380392 0.470588"/>
      <Anchor description="launch CameraExample scene"
               url="&#34;CameraExamples.x3d&#34; &#34;https://www.web3d.org/x3d/content/examples/Basic/development/CameraExamples.x3d&#34; &#34;CameraExamples.wrl&#34; &#34;https://www.web3d.org/x3d/content/examples/Basic/development/CameraExamples.wrl&#34;">
         <Transform>
            <Shape>
               <Text containerField="geometry"
                      string="&#34;CameraPrototypes.x3d&#34; &#34;defines multiple prototype nodes&#34; &#34;&#34; &#34;Click on this text to see&#34; &#34;CameraExamples.x3d scene&#34;">
                  <FontStyle justify="&#34;MIDDLE&#34; &#34;MIDDLE&#34;"/>
               </Text>
               <Appearance>
                  <Material diffuseColor="1 1 0.2"/>
               </Appearance>
            </Shape>
         </Transform>
      </Anchor>
   </Scene>
</X3D>
