<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.3//EN" "http://www.web3d.org/specifications/x3d-3.3.dtd">

<X3D profile="Immersive" version="3.3"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema-instance" xsd:noNamespaceSchemaLocation="https://www.web3d.org/specifications/x3d-3.3.xsd">
    <head>
        <meta content="arcold.x3d" name="title"/>
        <meta content="John Carlson" name="creator"/>
        <meta content="manual" name="generator"/>
        <meta
            content="https://coderextreme.net/X3DJSONLD/src/main/data/arc.x3d" name="identifier"/>
        <meta content="an attempt to implement an arc in a graph" name="description"/>
    </head>
    <Scene>
        <Viewpoint description="a moving graph" position="0 0 5"/>
        <Background skyColor="0.4 0.4 0.4"/>
        <Transform DEF="trans1">
            <Transform DEF="rotscale1">
                <Shape>
                    <Appearance>
                        <Material diffuseColor="0.2 0.7 0.7"/>
                    </Appearance>
                    <Cylinder radius="0.1"/>
                </Shape>
            </Transform>
        </Transform>
        <Transform DEF="trans2">
            <Transform DEF="rotscale2">
                <Shape>
                    <Appearance>
                        <Material diffuseColor="0.2 0.7 0.7"/>
                    </Appearance>
                    <Cylinder radius="0.1"/>
                </Shape>
            </Transform>
        </Transform>
        <Transform DEF="trans3">
            <Transform DEF="rotscale3">
                <Shape>
                    <Appearance>
                        <Material diffuseColor="0.2 0.7 0.7"/>
                    </Appearance>
                    <Cylinder radius="0.1"/>
                </Shape>
            </Transform>
        </Transform>
        <ProtoDeclare name="point">
            <ProtoInterface>
                <field accessType="inputOutput" name="translation"
                    type="SFVec3f" value="0 0 0"/>
            </ProtoInterface>
            <ProtoBody>
                <Transform DEF="node">
                    <IS>
                        <connect nodeField="translation" protoField="translation"/>
                    </IS>
                    <Shape>
                        <Sphere radius="0.1"/>
                        <Appearance>
                            <Material diffuseColor="1 0 0"/>
                        </Appearance>
                    </Shape>
                    <PositionInterpolator DEF="PI1" key="0 1" keyValue="0 0 0 0 5 0"/>
                    <Script DEF="MB1">
                        <field accessType="inputOutput"
                            name="translation" type="SFVec3f" value="50 50 0"/>
                        <field accessType="inputOutput" name="old"
                            type="SFVec3f" value="0 0 0"/>
                        <field accessType="inputOnly"
                            name="set_location" type="SFTime"/>
                        <field accessType="outputOnly" name="keyValue" type="MFVec3f"/><![CDATA[""
""
"ecmascript:"
"\t\tfunction set_location(value) {"
"                    old = translation;"
"\t\t    translation = new SFVec3f(Math.random()*10-5, Math.random()*10-5, Math.random()*10-5);"
"                    keyValue = new MFVec3f([old, translation]);"
"\t\t    // Browser.println(translation);"
"\t\t}"
""
""]]></Script>
                    <TimeSensor DEF="CL1" cycleInterval="3" loop="true"/>
                    <ROUTE fromField="cycleTime" fromNode="CL1"
                        toField="set_location" toNode="MB1"/>
                    <ROUTE fromField="fraction_changed" fromNode="CL1"
                        toField="set_fraction" toNode="PI1"/>
                    <ROUTE fromField="keyValue" fromNode="MB1"
                        toField="keyValue" toNode="PI1"/>
                    <ROUTE fromField="value_changed" fromNode="PI1"
                        toField="set_translation" toNode="node"/>
                </Transform>
            </ProtoBody>
        </ProtoDeclare>
        <!--"from doug sanden"-->
        <ProtoDeclare name="x3dconnector">
            <ProtoInterface>
                <field accessType="inputOutput" name="startnode" type="SFNode"/>
                <field accessType="inputOutput" name="endnode" type="SFNode"/>
                <field accessType="inputOutput" name="transnode" type="SFNode"/>
                <field accessType="inputOutput" name="rotscalenode" type="SFNode"/>
                <field accessType="inputOnly" name="set_startpoint" type="SFVec3f"/>
                <field accessType="inputOnly" name="set_endpoint" type="SFVec3f"/>
            </ProtoInterface>
            <ProtoBody>
                <Script DEF="S1">
                    <field accessType="inputOutput" name="startnode" type="SFNode"/>
                    <field accessType="inputOutput" name="endnode" type="SFNode"/>
                    <field accessType="inputOutput" name="transnode" type="SFNode"/>
                    <field accessType="inputOutput" name="rotscalenode" type="SFNode"/>
                    <field accessType="inputOnly" name="set_startpoint" type="SFVec3f"/>
                    <field accessType="inputOnly" name="set_endpoint" type="SFVec3f"/>
                    <IS>
                        <connect nodeField="startnode" protoField="startnode"/>
                        <connect nodeField="endnode" protoField="endnode"/>
                        <connect nodeField="transnode" protoField="transnode"/>
                        <connect nodeField="rotscalenode" protoField="rotscalenode"/>
                        <connect nodeField="set_startpoint" protoField="set_startpoint"/>
                        <connect nodeField="set_endpoint" protoField="set_endpoint"/>
                    </IS><![CDATA[""
"            ecmascript:"
"        function recompute(startpoint,endpoint){"
"\t    if (typeof endpoint === 'undefined') {"
"\t\treturn;"
"\t    }"
"            var dif = endpoint.subtract(startpoint);"
"            var dist = dif.length()*0.5;"
"            var dif2 = dif.multiply(0.5);"
"            var norm = dif.normalize();"
"            var transl = startpoint.add(dif2);"
"\t    if (typeof Quaternion !== 'undefined') {"
"\t\t    return {"
"\t\t\t    scale : new SFVec3f(1.0,dist,1.0),"
"\t\t\t    translation : transl,"
"\t\t\t    rotation : new Quaternion.rotateFromTo(new SFVec3f(0.0,1.0,0.0), norm)"
"\t\t    };"
"\t    } else {"
"\t\t    return {"
"\t\t\t    scale : new SFVec3f(1.0,dist,1.0),"
"\t\t\t    translation : transl,"
"\t\t\t    rotation : new SFRotation(new SFVec3f(0.0,1.0,0.0),norm)"
"\t\t    };"
"\t    }"
"\t}"
"\tfunction recompute_and_route(startpoint, endpoint) {"
"\t\tvar trafo = recompute(startpoint, endpoint);"
"\t\tif (typeof trafo !== 'undefined') {"
"\t\t\ttransnode.translation = trafo.translation;"
"\t\t\trotscalenode.rotation = trafo.rotation;"
"\t\t\trotscalenode.scale = trafo.scale;"
"\t\t} else {"
"\t\t\tBrowser.print(\"recompute returned undefined\");"
"\t\t}"
"\t}"
"        function initialize(){"
"            recompute_and_route(startnode.translation,endnode.translation);"
"        }"
"        function set_startpoint(val,t){"
"            recompute_and_route(val || startnode.translation,endnode.translation);"
"        }"
"        function set_endpoint(val,t){"
"            recompute_and_route(startnode.translation,val || endnode.translation);"
"        }"
""
""]]></Script>
            </ProtoBody>
        </ProtoDeclare>
        <ProtoInstance DEF="G1" name="point"/>
        <ProtoInstance DEF="G2" name="point"/>
        <ProtoInstance DEF="G3" name="point"/>
        <ProtoInstance DEF="G4" name="point"/>
        <ProtoInstance DEF="connector1" name="x3dconnector">
            <fieldValue name="startnode">
                <ProtoInstance USE="G1"/>
            </fieldValue>
            <fieldValue name="endnode">
                <ProtoInstance USE="G2"/>
            </fieldValue>
            <fieldValue name="transnode">
                <Transform USE="trans1"/>
            </fieldValue>
            <fieldValue name="rotscalenode">
                <Transform USE="rotscale1"/>
            </fieldValue>
        </ProtoInstance>
        <ProtoInstance DEF="connector2" name="x3dconnector">
            <fieldValue name="startnode">
                <ProtoInstance USE="G1"/>
            </fieldValue>
            <fieldValue name="endnode">
                <ProtoInstance USE="G3"/>
            </fieldValue>
            <fieldValue name="transnode">
                <Transform USE="trans2"/>
            </fieldValue>
            <fieldValue name="rotscalenode">
                <Transform USE="rotscale2"/>
            </fieldValue>
        </ProtoInstance>
        <ProtoInstance DEF="connector3" name="x3dconnector">
            <fieldValue name="startnode">
                <ProtoInstance USE="G1"/>
            </fieldValue>
            <fieldValue name="endnode">
                <ProtoInstance USE="G4"/>
            </fieldValue>
            <fieldValue name="transnode">
                <Transform USE="trans3"/>
            </fieldValue>
            <fieldValue name="rotscalenode">
                <Transform USE="rotscale3"/>
            </fieldValue>
        </ProtoInstance>
        <ROUTE fromField="translation_changed" fromNode="G1"
            toField="set_startpoint" toNode="connector1"/>
        <ROUTE fromField="translation_changed" fromNode="G2"
            toField="set_endpoint" toNode="connector1"/>
        <ROUTE fromField="translation_changed" fromNode="G1"
            toField="set_startpoint" toNode="connector2"/>
        <ROUTE fromField="translation_changed" fromNode="G3"
            toField="set_endpoint" toNode="connector2"/>
        <ROUTE fromField="translation_changed" fromNode="G1"
            toField="set_startpoint" toNode="connector3"/>
        <ROUTE fromField="translation_changed" fromNode="G4"
            toField="set_endpoint" toNode="connector3"/>
    </Scene>
</X3D>
