<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D
  PUBLIC "ISO//Web3D//DTD X3D 4.0//EN" "https://www.web3d.org/specifications/x3d-4.0.dtd">
<X3D xmlns:xsd="http://www.w3.org/2001/XMLSchema-instance"
      profile="Immersive"
      version="4.0"
      xsd:noNamespaceSchemaLocation="https://www.web3d.org/specifications/x3d-4.0.xsd">
   <head>
      <component level="1" name="Scripting"/>
      <component level="3" name="EnvironmentalEffects"/>
      <component level="1" name="Shaders"/>
      <component level="1" name="CubeMapTexturing"/>
      <component level="1" name="Texturing"/>
      <component level="1" name="Rendering"/>
      <component level="4" name="Shape"/>
      <component level="3" name="Grouping"/>
      <component level="1" name="Core"/>
      <meta content="flowerproto.x3d" name="title"/>
      <meta content="John Carlson" name="creator"/>
      <meta content="A flower proto with configurable shaders" name="description"/>
      <meta content="X3D-Edit, https://savage.nps.edu/X3D-Edit" name="generator"/>
      <meta content="https://coderextreme.net/X3DJSONLD/src/main/data/flowerproto.x3d"
             name="identifier"/>
   </head>
   <Scene>
      <ProtoDeclare name="FlowerProto">
         <ProtoInterface>
            <field accessType="inputOutput"
                    name="vertex"
                    type="MFString"
                    value="&#34;../shaders/gl_flowers_chromatic.vs&#34;"/>
            <field accessType="inputOutput"
                    name="fragment"
                    type="MFString"
                    value="&#34;../shaders/pc_flowers.fs&#34;"/>
         </ProtoInterface>
         <ProtoBody>
            <Transform DEF="transform">
               <Shape>
                  <Appearance>
                     <Material diffuseColor="0.7 0.7 0.7" specularColor="0.5 0.5 0.5"/>
                     <ComposedCubeMapTexture DEF="texture">
                        <ImageTexture containerField="backTexture"
                                       url="&#34;../resources/images/all_probes/stpeters_cross/stpeters_back.png&#34; &#34;https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_back.png&#34;"/>
                        <ImageTexture containerField="bottomTexture"
                                       url="&#34;../resources/images/all_probes/stpeters_cross/stpeters_bottom.png&#34; &#34;https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_bottom.png&#34;"/>
                        <ImageTexture containerField="frontTexture"
                                       url="&#34;../resources/images/all_probes/stpeters_cross/stpeters_front.png&#34; &#34;https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_front.png&#34;"/>
                        <ImageTexture containerField="leftTexture"
                                       url="&#34;../resources/images/all_probes/stpeters_cross/stpeters_left.png&#34; &#34;https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_left.png&#34;"/>
                        <ImageTexture containerField="rightTexture"
                                       url="&#34;../resources/images/all_probes/stpeters_cross/stpeters_right.png&#34; &#34;https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_right.png&#34;"/>
                        <ImageTexture containerField="topTexture"
                                       url="&#34;../resources/images/all_probes/stpeters_cross/stpeters_top.png&#34; &#34;https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_top.png&#34;"/>
                     </ComposedCubeMapTexture>
                     <ComposedShader DEF="shader" language="GLSL">
                        <field accessType="inputOutput" name="cube" type="SFInt32" value="0"/>
                        <field accessType="initializeOnly"
                                name="chromaticDispertion"
                                type="SFVec3f"
                                value="0.98 1.0 1.033"/>
                        <field accessType="inputOutput" name="bias" type="SFFloat" value="0.5"/>
                        <field accessType="inputOutput"
                                name="scale"
                                type="SFFloat"
                                value="0.5"/>
                        <field accessType="inputOutput" name="power" type="SFFloat" value="2"/>
                        <field accessType="inputOutput" name="a" type="SFFloat" value="10"/>
                        <field accessType="inputOutput" name="b" type="SFFloat" value="1"/>
                        <field accessType="inputOutput" name="c" type="SFFloat" value="20"/>
                        <field accessType="inputOutput" name="d" type="SFFloat" value="20"/>
                        <field accessType="inputOutput" name="tdelta" type="SFFloat" value="0"/>
                        <field accessType="inputOutput" name="pdelta" type="SFFloat" value="0"/>
                        <!--"<field name='cube' type='SFNode' accessType="inputOutput"> <ComposedCubeMapTexture USE="texture"/> </field>"-->
                        <ShaderPart type="VERTEX">
                           <IS>
                              <connect nodeField="url" protoField="vertex"/>
                           </IS>
                        </ShaderPart>
                        <ShaderPart type="FRAGMENT">
                           <IS>
                              <connect nodeField="url" protoField="fragment"/>
                           </IS>
                        </ShaderPart>
                     </ComposedShader>
                  </Appearance>
                  <Sphere containerField="geometry"/>
               </Shape>
               <Script DEF="Animate">
                  <field accessType="inputOutput"
                          name="translation"
                          type="SFVec3f"
                          value="0 0 0"/>
                  <field accessType="inputOutput"
                          name="velocity"
                          type="SFVec3f"
                          value="0 0 0"/>
                  <field accessType="inputOnly" name="set_fraction" type="SFFloat"/>
                  <field accessType="inputOutput" name="a" type="SFFloat" value="0.5"/>
                  <field accessType="inputOutput" name="b" type="SFFloat" value="0.5"/>
                  <field accessType="inputOutput" name="c" type="SFFloat" value="3"/>
                  <field accessType="inputOutput" name="d" type="SFFloat" value="3"/>
                  <field accessType="inputOutput"
                          name="tdelta"
                          type="SFFloat"
                          value="0.5"/>
                  <field accessType="inputOutput"
                          name="pdelta"
                          type="SFFloat"
                          value="0.5"/><![CDATA[


ecmascript:
			function initialize() {
			    translation = new SFVec3f(0, 0, 0);
			    velocity = new SFVec3f(
			    	Math.random() - 0.5,
				Math.random() - 0.5,
				Math.random() - 0.5);
			}
			function set_fraction() {
			    translation = new SFVec3f(
			    	translation.x + velocity.x,
				translation.y + velocity.y,
				translation.z + velocity.z);
			    for (var j = 0; j <= 2; j++) {
				    if (Math.abs(translation.x) > 10) {
					initialize();
				    } else if (Math.abs(translation.y) > 10) {
					initialize();
				    } else if (Math.abs(translation.z) > 10) {
					initialize();
				    } else {
					velocity.x += Math.random() * 0.2 - 0.1;
					velocity.y += Math.random() * 0.2 - 0.1;
					velocity.z += Math.random() * 0.2 - 0.1;
				    }
			    }
			    animate_flowers();
			}

			function animate_flowers(fraction, eventTime) {
				var choice = Math.floor(Math.random() * 4);
				switch (choice) {
				case 0:
					a += Math.random() * 0.2 - 0.1;
					break;
				case 1:
					b += Math.random() * 0.2 - 0.1;
					break;
				case 2:
					c += Math.random() * 2 - 1;
					break;
				case 3:
					d += Math.random() * 2 - 1;
					break;
				}
				tdelta += 0.5;
				pdelta += 0.5;
				if (a > 1) {
					a =  0.5;
				}
				if (b > 1) {
					b =  0.5;
				}
				if (c < 1) {
					c =  4;
				}
				if (d < 1) {
					d =  4;
				}
				if (c > 10) {
					c = 4;
				}
				if (d > 10) {
					d = 4;
				}
			}


]]></Script>
               <TimeSensor DEF="TourTime" cycleInterval="5" loop="true"/>
               <ROUTE fromField="fraction_changed"
                       fromNode="TourTime"
                       toField="set_fraction"
                       toNode="Animate"/>
               <ROUTE fromField="translation_changed"
                       fromNode="Animate"
                       toField="set_translation"
                       toNode="transform"/>
               <ROUTE fromField="a" fromNode="Animate" toField="a" toNode="shader"/>
               <ROUTE fromField="b" fromNode="Animate" toField="b" toNode="shader"/>
               <ROUTE fromField="c" fromNode="Animate" toField="c" toNode="shader"/>
               <ROUTE fromField="d" fromNode="Animate" toField="d" toNode="shader"/>
               <ROUTE fromField="tdelta"
                       fromNode="Animate"
                       toField="tdelta"
                       toNode="shader"/>
               <ROUTE fromField="pdelta"
                       fromNode="Animate"
                       toField="pdelta"
                       toNode="shader"/>
            </Transform>
         </ProtoBody>
      </ProtoDeclare>
   </Scene>
</X3D>
